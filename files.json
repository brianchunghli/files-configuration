{
  "py": {
    "p1": [
      "#!/usr/bin/env python3\n\n",
      "def main() -> None:\n\tpass\n\n",
      "if __name__ == '__main__':\n\tmain()\n\n"
    ]
  },
  "cmake": {
    "p1": [
      "# this must be the first line of a CMake script.\n",
      "# sets the lowerbound on what CMake version can be used.\n",
      "cmake_minimum_required(VERSION 3.0)\n",
      "\n",
      "# the name of this CMake project and what language it uses\n",
      "# we could list more languages if we were using more.\n\n",
      "project($FILENAME LANGUAGES C CXX)\n\n",
      "# it is best to keep the source code away from the autogenerated CMake build artifacts.\n",
      "if(${PROJECT_SOURCE_DIR} STREQUAL ${PROJECT_BINARY_DIR})\n",
      "  message(FATAL_ERROR \"In-source builds are not supported. Please make a new directory and run cmake from there.\")\n",
      "endif()\n",
      "\n",
      "set(CMAKE_CXX_STANDARD 20)\n",
      "set(CMAKE_CXX_STANDARD_REQUIRED YES)\n",
      "set(CMAKE_CXX_EXTENSIONS NO)\n\n",
      "# this is helpful for editors like VS Code\n",
      "set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n",
      "\n",
      "# helpful compiler flags for gcc/clang\n",
      "# the descriptions for these flags can be found on the GNU Compiler Collection's webpage.\n",
      "add_compile_options(\n",
      "  -Wall\n",
      "  -Wextra\n",
      "  -Werror\n",
      "  -pedantic-errors\n",
      "  -Wconversion\n",
      "  -Wsign-conversion\n",
      "  -Wdouble-promotion\n",
      "  -Wcast-align\n",
      "  -Wformat=2\n",
      "  -Wuninitialized\n",
      "  -Wnull-dereference\n",
      "  -Wnon-virtual-dtor\n",
      "  -Woverloaded-virtual\n",
      "  -Wdeprecated-copy-dtor\n",
      "  -Wold-style-cast\n",
      "  -Wzero-as-null-pointer-constant\n",
      "  -Wsuggest-override\n",
      "  -fstack-protector-strong\n",
      ")\n\n",
      "# debug builds should be compiled with sanitizers\n",
      "# sanitizers are small libraries that check things like buffer overrun with minimal runtime overhead.\n",
      "set(CMAKE_CXX_FLAGS_DEBUG_INIT \"-fsanitize=address,undefined\")\n",
      "set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT \"-fsanitize=address,undefined\")\n",
      "set(CMAKE_CXX_EXE_LINKER_FLAGS_DEBUG_INIT \"-fsanitize=address,undefined\")\n",
      "set(CMAKE_CXX_EXE_LINKER_FLAGS_RELWITHDEBINFO_INIT \"-fsanitize=address,undefined\")\n\n",
      "add_executable(main $FILENAME.$SUFFIX)"
    ],
    "tests": [
      "# --------------------- TESTING LIBRARY ---------------------- #\n",
      "enable_testing()\n",
      "add_library(catch2_main lib/catch2_main.cpp)\n",
      "target_include_directories(catch2_main PUBLIC lib)\n",
      "\n# -------------------- TESTS AND PROGRAM --------------------- #\n",
      "add_library(main $FILENAME.$SUFFIX)\n",
      "link_libraries(catch2_main)\n",
      "link_libraries(main)\n",
      "add_executable(main_test $FILENAME.test.$SUFFIX)\n",
      "add_test($FILENAME_test main_test)\n"
    ]
  },
  "make": {
    "p1.c": [
      "CC = gcc -std=c99\n",
      "CFLAGS =",
      " -Wall",
      " -Wextra",
      " -Werror",
      " -pedantic-errors",
      " -Wconversion",
      " -Wsign-conversion",
      " -Wdouble-promotion",
      " -Wcast-align",
      " -Wformat=2",
      " -Wuninitialized",
      " -Wnull-dereference",
      " -Wnon-virtual-dtor",
      " -Woverloaded-virtual",
      " -Wdeprecated-copy-dtor",
      " -Wold-style-cast",
      " -Wzero-as-null-pointer-constant",
      " -Wsuggest-override",
      " -fstack-protector-strong\n\n",
      "MKDIR_P := mkdir -p\n",
      "OUT_DIR := build\n\n",
      ".PHONY: noargs $FILENAME clean\n\n",
      "noargs:\n\t@echo 'make <$FILENAME | clean>'\n",
      "clean:\n\trm -rf $(OUT_DIR)\n",
      "$FILENAME: $(OUT_DIR)/$FILENAME\n\n",
      "$(OUT_DIR):\n\t$(MKDIR_P) $(OUT_DIR)\n",
      "$(OUT_DIR)/$FILENAME: $FILENAME.$SUFFIX | $(OUT_DIR)\n",
      "\t${CC} ${CFLAGS} -o $(OUT_DIR)/$FILENAME $FILENAME.$SUFFIX"
    ],
    "p1.cpp": [
      "CC = g++ -std=c++20\n",
      "CFLAGS =",
      " -Wall",
      " -Wextra",
      " -Werror",
      " -pedantic-errors",
      " -Wconversion",
      " -Wsign-conversion",
      " -Wdouble-promotion",
      " -Wcast-align",
      " -Wformat=2",
      " -Wuninitialized",
      " -Wnull-dereference",
      " -Wnon-virtual-dtor",
      " -Woverloaded-virtual",
      " -Wdeprecated-copy-dtor",
      " -Wold-style-cast",
      " -Wzero-as-null-pointer-constant",
      " -Wsuggest-override",
      " -fstack-protector-strong\n",
      "MKDIR_P := mkdir -p\n",
      "OUT_DIR := build\n\n",
      ".PHONY: noargs $FILENAME clean\n\n",
      "noargs:\n\t@echo 'make <$FILENAME | clean>'\n",
      "clean:\n\trm -rf $(OUT_DIR)\n",
      "$FILENAME: $(OUT_DIR)/$FILENAME\n\n",
      "$(OUT_DIR):\n\t$(MKDIR_P) $(OUT_DIR)\n",
      "$(OUT_DIR)/$FILENAME: $FILENAME.$SUFFIX | $(OUT_DIR)\n",
      "\t${CC} ${CFLAGS} -o $(OUT_DIR)/$FILENAME $FILENAME.$SUFFIX"
    ]
  },
  "c": {
    "p1": [
      "#include <stdio.h>\n",
      "#include <stdlib.h>\n\n",
      "int main(void) {",
      "\n\n  return 0;\n}\n"
    ],
    "p2": [
      "#include <stdio.h>\n",
      "#include <stdlib.h>\n\n",
      "int main(int argc, char *argv[]) {",
      "\n\n  return 0;\n}\n"
    ]
  },
  "cpp": {
    "p1": ["#include <iostream>\n\n", "int main() {\n\n", "  return 0;\n}\n"],
    "p1.m": [
      "#include <iostream>\n\n",
      "int main(const int argc, const char *argv[]) {\n\n",
      "  return 0;\n}\n"
    ],
    "p2": [
      "#include <cmath>\n#include <iostream>",
      " \n\nvoid solve() {}\n\n",
      "int main(void) {\n\n",
      "\tstd::ios_base::sync_with_stdio(false);\n\tint tc;\n",
      "\tstd::cin >> tc;\n\tfor (auto t = 0; t < tc; ++t) {\n",
      "\t\t// cout << \"Case #\" << t << \": \";\n\t\tsolve();\n\t}\n\treturn 0;\n}\n"
    ],
    "p2.m": [
      "#include <cmath>\n#include <iostream>",
      " \n\nvoid solve() {}\n\n",
      "int main(const int argc, const char *argv[]) {\n\n",
      "\tstd::ios_base::sync_with_stdio(false);\n\tint tc;\n",
      "\tstd::cin >> tc;\n\tfor (auto t = 0; t < tc; ++t) {\n",
      "\t\t// cout << \"Case #\" << t << \": \";\n\t\tsolve();\n\t}\n\treturn 0;\n}\n"
    ]
  },
  "sh": {
    "p1": "#!/bin/sh\n"
  },
  "zsh": {
    "p1": "#!/bin/zsh\n"
  }
}
